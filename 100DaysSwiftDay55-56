Day 55 - 56. Project 14. 
SKCropNode SKTexture SKSequenses SKActionMoveBy SKAction.run SKAction.wait SKAction.sequence
Что было сделано?
Весь код был написан в двух файлах: GameScene, WhackSlot. Так же в xcassets были добавлены файлы хорошего и плохого пингвинов, фона игры, надписи game over и ямы и маски для cropNode.  
Так же были добавлены два звуковых файла в основную папку с файлами. 

Файл GameScene as class SKScene содержит следующие основные переменные:
gameScore - для отображения текста с набранными очками
popupTime - время на которое будет появляться пингвин
Score - для подсчёта набранных очков и передачи инфо на gameScore имеет свойство обозревателя
numRounds - переменная для ограничения количества раундов потому что скорость появления пингвинов постоянно растёт. 
Slots - массив с whackSlot который будет использован для создания слотов на parent node

Использовались два стандартных метода, которые входят в GameScene  это: didMove(),  touchesBegan()
Так же были написаны два дополнительных метода func createSlot(), func createEnemy()
Разберём содержание этих функций:
func didMove(to view: SKView): метод, в котором задаётся положение node на экране
- Задана картинка для фона игры
- Задан текст шрифт и координаты для score
- Созданы слоты 4 ряда по 5 и 4 слота в ряду 
- Вызов первый раз функции createEnemy() при помощи GCD asyncAfter чтобы была задержка между запуском игры и появлением первого пингвина, чтобы игрок смог осмотреть поле  
func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?):  метод в котором идет описание действий при касании. 
- Определяется что было касание через guard let, определяется местоположение касания, определяется node согласно местоположения касания. 
- Далее идет цикл в котором делается type casting чтобы node был объектом с типом WhackSlot, делается проверка что node виден и что на него есть касание, тогда запускается функция func hit(), далее идёт проверка до какой node было касание: charFriend or charEnemy и если это charFriend, то уменьшается количество очков на 5 и проигрывается звук файла whackBad.caf. Если это charEnemy, то уменьшение картинки на 15% и идет начисление очков и проигрывается звук whack.caf. 
func createSlot(at position:CgPoint)
Производится объявление слота типом WhackSlot, определяется место создания слота и добавление слота addChild и так же добавление слота к массиву slots
func createEnemy()
 Достаточно обширная функция получилась. 
- При вызове функции добавляется число раундов на 1
- Делается проверка на количество раундов, если больше 30, будет продемонстрированна надпись Game Over
- Иначе будет вызываться функция show() для определенного компонента массива slots и далее указывается интервал задержки и через GCD asyncAfter вызывается функция createEnemy(). функция вызывает сама себя с задержкой и максимальным количеством запусков 30 раз. 


Так же был создан дополнительный файл WhackSlot который стал типом для массива slots, который был сделан наследником SKNode и в котором были созданы три переменные: charNode type SKSpriteNode, isVisible bool, isHit bool.  
И были созданы четыре функции func configure(), func show(), func hit(), func hide()
- Переменная isVisible  определяет условие вызова функций show(), hide()
- Переменная isHit определяет условие вызова функции hit()

func configure(at position: CGpiont)
Создает и определяет положение экземпляров sprite - картинка норы, cropNode + maskNode for cropNode, charNode - childNode for cropNode, присвоение имени charNode и добавление к parent cropNode, sprite. 

func show(hideTime: Double) 
Показывает картинку пингвина в полном размере и в зависимости от случайного числа от 0 до 2 показывает картинку хорошего или плохого пингвина и присваивает имя charNode либо charFriend либо charEnemy и по истечении времени hideTime при помощи GCD asyncAfter вызывает функцию hide()

func hide()
Убирает картинку пингвина

func hit()
В этой функции определены действия после нажатия на картинку пингвина delay, hide, notVisible и далее задаётся последовательность их выполнения в виде массива SKAction.sequence([delay, hide, notVisible])

Challenge:
1. Записать своим голосом Game Over и сделать чтобы проигрывалось при окончании игры
Записан файл при помощи QuickTime player - добавлен в общую папку с файлами приложения - добавлен run SKAction.playSoundFileNamed()

2. Когда показывается надпись Game Over  добавить SKLabelNode с количеством набранных очков. 
Объявлена еще одна переменная totalScore: SKLablelNode. Добавлена после game over node.  С указанием размера шрифта, названия шрифта, текста для node, указанием zposition  и просто position.
 
3. Использовать SKEmitterNode чтобы добавить эффект дыма, когда есть попадание по пингвину и добавить эффект грязи когда пингвин прячется в нору или вылазиет из норы. 
Добавлен файл smoke.sks из стандарной библиотеки swift.  В этом файле был изменён emitter bithrate = 200 и maximum = 50

Далее было добавлено func smoke() в которой создаётся экземпляр emitterNode с именем файла smoke и добавляется как addChild и с небольшой задержкой удаляется removeFromParent(). 

Ссылка на урок gitHub: https://github.com/igorpolousov/Project14.WhackAPinguin
