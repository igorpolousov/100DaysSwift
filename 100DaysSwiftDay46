Day 46.  Project 11.  SKAction, SKPhysicsContactDelegate, SKLabelNode


SKAction
    Основная цель этой игры заключается в том, что когда пользователь запускает шар, то шар может попасть в “плохой” или “хороший” слот. 

Для этого будет добавлена функция makeSlot для создания слотов двух видов. Она будет принимать два значения. Координаты слота CGPoint и хороший или плохой слот - булевое значение. 

Добавили 4 слота в метод didMove и так же добавлено свечение слотов slotGlow. 

Затем было добавлено действие к slotGlow.  Было создано вращение let spin при помощи SKAction.rotate  и задан цикл этого вращения как бесконечный через константу spinForever SKAction.repeatForever и потом этот цикл был применен к slotGlow при помощи slotGlow.run

SKPhysicsContactDelegate
Сделали чтобы класс GameScene соответствовал указанному протоколу и добавил в метод didMove  строку physicsWorld.contactDelegate = self. Далее сделали каждому объекту имя. 

Для объекта slotBase добавили physicsBody  и сделали его статичным 

Далее добавили несколько методов. 
 Collision -  в котором определяется что если мяч столкнется с любым слотом то вызывается следующая функция 
Destroy  - которая удаляет мяч из игры

И последним был добавлен метод didBegin() в что если объект мяч столкнулся с объектом слот, то он удаляется. Вызывается функция collision, которая вызывает destroy

SKLabelNode
Были добавлены 2 LabelNode - это аналог UILabel. Score и editLabel

Score  - нужен для того чтобы отображались очки если мяч падает в тот или иной слот

editLabel - нужен для того чтобы выбирать можно добавлять блоки в игру или нет. Принимает булевое значение. 

Далее добавили и разместили оба SKLabelNode на экране в методе didMove

Далее в методе touchesBegan  добавили константу object которая определяет все объекты в игре на экране

Если object содержит editingLabel и editingLabel имеет значение true, тогда создаются прямоугольники случайным образом иначе создаются шары

Так же в методе collision добавлены изменения score в зависимости от того в какой слот попадает шар. 

Ссылка на код урока

 на GitHub: https://github.com/igorpolousov/Project11-Pochinko
