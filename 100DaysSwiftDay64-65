Day 64-65. Project 18.

Технический проект в котором будут рассмотрены методы работы с ошибками в коде. assert(), breakPoints, viewDebugging. 

Первый способ для обнаружения ошибок - это print(). 
Так же можно использовать print(123, terminator: “”) print(123,separator:”-“). Separator используется для радения символов внутри print()
Terminator используется для переноса на новую строку задается определенным параметром. Например можно делать перенос на новую строку \n или указать в методе print() terminator: “”

Второй способ - это assert(), у этого метода есть два параметра: первый - это то что должен этот метод проверять и второй - это сообщение, которое он выдаст если проверка не пройдет. Если проверка не пройдет и произойдет ошибка, то приложение будет остановлено и будет показано сообщение в debug console. Так что нужно Аккуратно использовать этот метод в коде.  Преимуществом этого метода является то, что можно делать сложные проверки и проверять код который в приложении не используется. Этот метод так же используется пока приложение находится в тестом формате, когда приложение отправляется в AppStore  эти методы все удаляются. 

Третий способ - это использование breakPoints. Для демонстрации этого метода будет использоваться простой цикл.  for i in 1…100 {
                     print(“Got number \(i)”)
                }
Breakpoint будет выставлен на строе с кодом print и как только будет выполнение этой строки, дальнейшее выполнение программы будет остановлено. Чтобы продолжить выполнение программы нужно нажать fn + F6 и программа будет выполнять следующий шаг. 

Второе сочетание клавиш - это ctrl + cmd + Y - это сочетание продолжит выполнение программы до следующего breakepoint. 

При остановке программы в левом углу можно посмотреть все потоки, которые выполняются в данный момент в программе. 

Так же Xcode предоставляет LLDB debugger window где можно задать команду p i , которая распечает текущее значение i. 

Так же можно передвинуть вручную зелёную полоску на строк кода, которую хочется выполнить just click and drug.  Сразу выскочит предупреждение, что это может привести к завершению работы программы.  И оно может!!

Еще одна возможность проверить работу программы - это нажать правой кнопкой мыши на синию стрелку breakpoint  и задать дополнительные условия. Например можно установить i % 10 == 0 и тогда будет останавливать программу каждые 10 раз.  conditional breakpoints

!! Кстати такой вариант можно было бы использовать в предыдущем проекте вместо оператора switch. 

Так же еще можно использовать cmd + 8 чтобы посмотреть breakpoint navigator и если нажать символ + в левом нижнем углу и выбрать exception breakpoint , то в следующий раз, когда появится ошибка exception breakpoint покажет где была ошибка. 

Четвертый способ - это Capture View Hierarchy.  Для того чтобы посмотреть полный состав User Interface  и посмотреть по слоям UI приложения. Чтобы выбрать эту функцию нужно спустить ся в debug меню внизу и выбрать там иконку debug view hierarchy или сделать это через меню вверху. Последовательность такая же. 

Challenge. 
1. В проекте 1 установить  Exception breakpoint и в методе instantiateViewController() поменять detailViewController id на bad и exception breakpoint должна поймать эту ошибку. 
При изменении id без exception breakpoint  просто показывается ошибка и место этой ошибки нужно еще найти.  При установке exception breakpoint  сразу было показано место где есть ошибка в коде. Очень удобно. 

2. В проекте 1 в detailViewController в метод viewDidLoad добавить assert()  который будет проверять что selectedImage всегда имеет значение.(картинку)
Добавлена строка  assert(selectedImage != nil, "failure") тоже удобно, похоже по функционалу на if let или guard let. Exception breakpoint удобнее. 
Ссылка на задание: https://github.com/igorpolousov/StormViewer/tree/Day65_Challenge

3. В проекте 5 добавить conditional Breakpoint в метод submit(), который будет делать паузу в работе приложения тольк если пользователь ввёл слово из 6 букв и более. 
Был установлен breakpoint и добавлено условие word.utf16.count >= 6 
Ссылка на задание: https://github.com/igorpolousov/Anagrams-Project-5/tree/Day65_Challenge
